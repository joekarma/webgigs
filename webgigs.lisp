;;;; webgigs.lisp

(in-package #:webgigs)

(defvar *webgigs-hostname* (config:get-configuration :webgigs :hostname))

(restas:define-route index ("/")
  (yaclml:with-yaclml-output-to-string
    (<:html
     (<:head
      (<:title "Interesting Craigslist Posts")
      (<:ai "<link href='http://fonts.googleapis.com/css?family=Sanchez' rel='stylesheet' type='text/css'>
<link href='http://fonts.googleapis.com/css?family=Merriweather+Sans' rel='stylesheet' type='text/css'>")
      (page-style)
      (<:script
       (ps:ps-to-stream yaclml:*yaclml-stream*
         (defun like-link (link)
           (let ((xhr (ps:new -x-m-l-http-request)))
             ((ps:@ xhr open) "GET" (ps:@ link href) true)
             ((ps:@ xhr send) nil))
           (setf (ps:@ link parent-node class-name) "favourite")))))
     (<:body
      (<:div :id "container"
             (<:h1 (<:a :href "/" "Web Developer Gigs"))
             (<:div :id "menu" :class "menu"
                    (<:form :action "/" :method "post"
                            (<:input :type "hidden" :name "action" :value "update")
                            (<:a :href "#" :onclick "this.parentNode.submit(); return false;" "Update List")))
             (<:div :id "menu-2" :class "menu"
                    (<:a :href "#" "Search"))
             (<:div :id "content"
                    (<:ul
                     (loop :for post :in (webgigs.db:get-all-stored-links)
                           :do (render-link post)))))))))

(restas:define-route index-action ("/" :method :post)
  (when (string= (hunchentoot:post-parameter "action")
                 "update")
    (webgigs.db:store-gig-links-for-all-categories))
  (index))  

(restas:define-route add-post-to-favourites ("/post/:(id)/favourite")
  (webgigs.db:mark-link-as-favourite id)
  "Added to favourites.")

(defun start-server ()
  (restas:start :webgigs :hostname *webgigs-hostname* :port 8080
                :context (make-context '((yaclml:*yaclml-indent* . nil)
                                         (setf hunchentoot:*show-lisp-errors-p* . t)))))

(defun page-style ()
  (<:style
   (<:ai
    (css-lite:css-string
      (("html, body") (("margin" "28px 80px 0 60px")
                       ("padding" "0")
                       ("font-family" "lucida grande")
                       ("font-weight" "100")
                       ("background-color" "white")))
      (("h1") (("text-align" "center")
               ("font-family" "lucida grande")
               ("font-weight" "100")
               ("background-color" "black")
               ("color" "black")
               ("padding" "10px")
               ("position" "fixed")
               ("left" "0")
               ("right" "0")
               ("top" "0")
               ("margin" "0")
               ("text-decoration" "none")
               ("border-bottom" "solid black 3px")
               ("z-index" "1")))
      (("h1 a") (("color" "white")
                 ("text-decoration" "none")))
      (("#content") (("margin" "0px")
                     ("background-color" "white")
                     ("text-align" "center")
                     ("padding-bottom" "1px")))
      (("#content a") (("background-color" "black")
                       ("color" "white")
                       ("padding" "5px")
                       ("text-decoration" "none")
                       #+nil("border" "solid white 1px")))
      (("#content a:hover:visited") (("background-color" "blue")
                                     ("color" "white")))
      (("#content a:visited") (("background-color" "#101010")
                               ("color" "#a0a0a0")))
      (("#content a:link:hover") (("background-color" "blue")
                                  ("color" "white")))
      (("#content a:active") (("background-color" "red")))
      (("#content li.favourite a, #content li.favourite a:hover") (("background-color" "red")
                                                                   ("color" "white")))
      ((".category") (("font-size" "10px")
                      ("position" "absolute")
                      ("right" "10px")
                      ("bottom" "-8px")))
      (("form") (("text-align" "center")))
      (("p, button, li" ) (("font-size" "16px")))
      (("button") (("background" "transparent")
                   ("border" "0")))
      (("button span") (("color" "#808080")
                        ("text-decoration" "underline")
                        ("cursor" "pointer")))
      (("li") (("display" "inline-block")
               ("margin" "10px")
               ("padding" "10px")
               ("list-style-type" "none")
               ("position" "relative")
               ("z-index" "0")))
      ((".menu") (("position" "fixed")
                  ("left" "10px")
                  ("top" "57px")
                  ("background-color" "black")
                  #+nil("background" "-webkit-linear-gradient(black, #151a18)")
                  ("border-top" "solid black 3px")
                  ("color" "white")
                  ("width" "160px")
                  ("padding-bottom" "13px")
                  ("z-index" "3")))
      (("#menu-2") (("left" "auto")
                    ("right" "10px")))
      ((".menu:after") (("content" "\"\"")
                        ("display" "block")
                        ("position" "absolute")
                        ("bottom" "-50px")
                        ("left" "0")
                        ("width" "0")
                        ("height" "0")
                        ("border-left" "solid transparent 80px")
                        ("border-right" "solid transparent 80px")
                        ("border-top" "solid black 50px")))
      ((".menu a") (("color" "black")
                    ("text-align" "center")
                    ("background-color" "white")
                    ("text-decoration" "none")
                    #+nil("border-bottom" "solid white 1px")
                    #+nil("border-top" "solid white 1px")
                    ("display" "block")
                    ("padding" "5px")
                    #+nil   ("border-right" "solid black 1px")
                    #+nil("border-left" "solid black 1px")                    
                    ("margin-top" "10px")))
      ((".menu form") (("margin" "0")
                       ("padding" "0")))
      ((".menu a:first-of-type") (("margin-top" "17px")))
      ((".menu a:hover") (("background-color" "white")
                          ("color" "black")))))))

(defun render-link (link)
  (<:li :class (when (alexandria:assoc-value link :favourite)
                 "favourite")
        (<:a :href (format nil "http://vancouver.en.craigslist.ca/~a/~a/~a.html"
                           (alexandria:assoc-value link :city)
                           (alexandria:assoc-value link :category)
                           (alexandria:assoc-value link :id))
             :target "_blank"
             
             (<:ai (alexandria:assoc-value link :title)))
        (<:a :class "like-button" :href (restas:genurl 'add-post-to-favourites :id (alexandria:assoc-value link :id)) :onclick "likeLink(this); return false;" (<:ai " &#10084;"))
        (<:span :class "category" (<:ah (alexandria:assoc-value link :category)))))


